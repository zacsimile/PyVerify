?start: program
?add: aexp "+" aexp
?sub: aexp "-" aexp
    | "-" aexp -> neg
?div: aexp "/" aexp
?mult: aexp "*" aexp
?mod: aexp "%" aexp
?read: NAME "[" aexp "]"
?aexp: NUMBER
    | NAME
    | read
    | add
    | sub
    | mult
    | div
    | mod
    | "(" aexp ")"
?eq: aexp "=" aexp
?neq: aexp "!=" aexp
?leq: aexp "<=" aexp
?geq: aexp ">=" aexp
?lt: aexp "<" aexp
?gt: aexp ">" aexp
?comp.3: eq
    | neq
    | leq
    | geq
    | lt
    | gt
?bnot.12: "!" bexp -> bnot
?bor.10: bexp "||" bexp -> bor
?band.11: bexp "&&" bexp -> band
?bparen.13: "(" bexp ")" -> bparen
?bexp: comp
    | bnot
    | bor
    | band
    | bparen
?assign: NAME ":=" aexp ";"
    | parassign
    | write
?parassign: NAME "," NAME ":=" aexp "," aexp ";"
?write: NAME "[" aexp "] :=" aexp ";"
?ifstmt: "if" bexp "then" block "else" block "end"
    | "if" bexp "then" block "end"
?inv: "inv" assn -> inv
?whilestmt: "while" bexp inv* "do" block "end"
?stmt: assign
    | ifstmt
    | whilestmt
?assume: "assume" block
?assert: "assert" block
?havoc: "havoc" block
?block: stmt*
?pre: "pre" assn -> pre
?post: "post" assn -> post
?program: "program" NAME pre* post* "is" block "end"
?assnparen.9: "(" assn ")" -> bparen
?assnand.5: assn "&&" assn -> band
?assnnot.6: "!" assn -> bnot
?assnnor.4: assn "||" assn -> bor
?assnimp.2: assn "==>" assn -> implies
?assnforall.8: "forall" NAME* "," assn -> forall
?assnexists.7: "exists" NAME* "," assn -> exists
?assn: comp
    | assnnot
    | assnnor
    | assnand
    | assnimp
    | assnforall
    | assnexists
    | assnparen
    | "true" -> const_true
    | "false" -> const_false
%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
%ignore WS